name: Snyk Security Scan and Automated Resolution

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write

jobs:
  snyk-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          # Install dependencies for multi-project structure
          echo "Installing dependencies for all projects..."
          
          # Install root dependencies if they exist and are not empty
          if [ -f package.json ] && [ "$(jq '.dependencies // {} | length' package.json)" -gt 0 ]; then
            echo "Installing root Node.js dependencies..."
            npm ci
          fi
          
          # Install frontend dependencies
          if [ -f contact-form-app/frontend/package.json ]; then
            echo "Installing frontend dependencies..."
            cd contact-form-app/frontend
            npm ci
            cd ../..
          fi
          
          # Install backend dependencies
          if [ -f contact-form-app/backend/requirements.txt ]; then
            echo "Installing backend Python dependencies..."
            pip install -r contact-form-app/backend/requirements.txt
          fi
          
          # Install other project dependencies if they exist
          find . -name "package.json" -not -path "./node_modules/*" -not -path "./contact-form-app/frontend/node_modules/*" | while read package_file; do
            dir=$(dirname "$package_file")
            if [ "$dir" != "." ] && [ "$dir" != "./contact-form-app/frontend" ]; then
              echo "Installing dependencies in $dir..."
              cd "$dir"
              if [ -f package-lock.json ] || [ -f yarn.lock ]; then
                npm ci 2>/dev/null || npm install
              fi
              cd - > /dev/null
            fi
          done

      - name: Install Snyk CLI
        run: |
          npm install -g snyk
          snyk --version

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          # Verify token is available
          if [ -z "$SNYK_TOKEN" ]; then
            echo "Error: SNYK_TOKEN secret is not set"
            echo "Please add your Snyk API token to GitHub repository secrets"
            exit 1
          fi
          
          # Test authentication by running a simple command
          echo "Testing Snyk authentication..."
          snyk auth --help > /dev/null 2>&1 || echo "Snyk CLI ready"

      - name: Run Snyk Security Scan
        id: snyk-scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG_ID: ef0bb1e6-0d53-4889-b1b3-252dac87a0ef
        run: |
          # Create output directory
          mkdir -p snyk-results
          
          # Run Snyk test with JSON output for vulnerabilities
          echo "Running Snyk vulnerability scan..."
          snyk test --org=$SNYK_ORG_ID --json --severity-threshold=medium > snyk-results/vulnerabilities.json || true
          
          # Run Snyk code scan for static analysis (if available)
          echo "Running Snyk code scan..."
          if snyk code test --org=$SNYK_ORG_ID --json --severity-threshold=medium > snyk-results/code-issues.json 2>/dev/null; then
            echo "✅ Snyk Code scan completed"
          else
            echo "⚠️ Snyk Code not available for this organization"
            echo '{"runs": [{"results": []}]}' > snyk-results/code-issues.json
          fi
          
          # Check if we have any medium+ severity findings
          MEDIUM_HIGH_VULNS=$(cat snyk-results/vulnerabilities.json | jq '.vulnerabilities[]? | select(.severity == "medium" or .severity == "high" or .severity == "critical")' | jq -s length)
          MEDIUM_HIGH_CODE_ISSUES=$(cat snyk-results/code-issues.json | jq '.runs[]?.results[]? | select(.level == "warning" or .level == "error")' | jq -s length)
          
          echo "medium-high-vulns=$MEDIUM_HIGH_VULNS" >> $GITHUB_OUTPUT
          echo "medium-high-code-issues=$MEDIUM_HIGH_CODE_ISSUES" >> $GITHUB_OUTPUT
          
          # Store scan results as artifacts
          echo "Vulnerability scan found $MEDIUM_HIGH_VULNS medium+ severity vulnerabilities"
          echo "Code scan found $MEDIUM_HIGH_CODE_ISSUES medium+ severity code issues"

      - name: Parse Medium+ Severity Findings
        id: parse-findings
        if: steps.snyk-scan.outputs.medium-high-vulns > 0 || steps.snyk-scan.outputs.medium-high-code-issues > 0
        run: |
          # Parse vulnerability findings
          VULN_SUMMARY=""
          if [ -f snyk-results/vulnerabilities.json ] && [ "$(cat snyk-results/vulnerabilities.json | jq '.vulnerabilities | length')" -gt 0 ]; then
            VULN_SUMMARY=$(cat snyk-results/vulnerabilities.json | jq -r '
              .vulnerabilities[]? | 
              select(.severity == "medium" or .severity == "high" or .severity == "critical") | 
              "- **\(.title)** (\(.severity))\n  Package: \(.packageName)@\(.version)\n  Path: \(.from | join(" > "))\n  Fix: \(.fixedIn // "No fix available")\n  Description: \(.description)\n"
            ')
          fi
          
          # Parse code issue findings
          CODE_SUMMARY=""
          if [ -f snyk-results/code-issues.json ] && [ "$(cat snyk-results/code-issues.json | jq '.runs[]?.results | length')" -gt 0 ]; then
            CODE_SUMMARY=$(cat snyk-results/code-issues.json | jq -r '
              .runs[]?.results[]? | 
              select(.level == "warning" or .level == "error") | 
              "- **\(.ruleId)** (\(.level))\n  File: \(.locations[0].physicalLocation.artifactLocation.uri)\n  Line: \(.locations[0].physicalLocation.region.startLine)\n  Message: \(.message.text)\n"
            ')
          fi
          
          # Combine findings
          FINDINGS_SUMMARY="# Medium+ Severity Security Findings\n\n"
          
          if [ ! -z "$VULN_SUMMARY" ]; then
            FINDINGS_SUMMARY="${FINDINGS_SUMMARY}## Vulnerability Findings:\n${VULN_SUMMARY}\n\n"
          fi
          
          if [ ! -z "$CODE_SUMMARY" ]; then
            FINDINGS_SUMMARY="${FINDINGS_SUMMARY}## Code Security Issues:\n${CODE_SUMMARY}\n\n"
          fi
          
          # Save findings to file for Devin
          echo -e "$FINDINGS_SUMMARY" > snyk-results/findings-summary.md
          
          # Output for next step
          echo "findings-available=true" >> $GITHUB_OUTPUT
          echo "findings-count=$((${MEDIUM_HIGH_VULNS:-0} + ${MEDIUM_HIGH_CODE_ISSUES:-0}))" >> $GITHUB_OUTPUT

      - name: Create Devin Security Resolution Session
        id: devin-security
        if: steps.parse-findings.outputs.findings-available == 'true'
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
          FINDINGS_COUNT: ${{ steps.parse-findings.outputs.findings-count }}
          
          SECURITY_PROMPT: |
            You are Security Resolver Devin with expertise in vulnerability remediation and secure coding practices. Your tasks:
            
            1. Clone/pull the repository ${{ github.repository }} locally.
            2. Review the Snyk security scan findings provided below.
            3. Analyze each medium+ severity vulnerability and security issue identified.
            4. Create a comprehensive remediation plan for all findings.
            5. Implement fixes for the security vulnerabilities following these priorities:
               - Update vulnerable dependencies to secure versions
               - Fix code-level security issues (SQL injection, XSS, etc.)
               - Implement security best practices
               - Add security-focused tests where appropriate
            7. Create a detailed security report documenting:
               - Summary of vulnerabilities found
               - Remediation actions taken
               - Any remaining risks or recommendations
               - Prevention strategies for similar issues
            8. If working on a pull request, create security-focused comments on relevant lines
            
            Rules and Guidelines:
            1. Only make commits or pushes to a new branch in the repository to review and suggest code change fixes
            2. Focus on critical and high severity findings first, then medium severity
            3. Provide specific, actionable remediation steps, then execute the changes
            4. Verify that proposed fixes don't introduce new vulnerabilities
            5. Consider the impact of changes on application functionality
            6. Suggest additional security measures beyond immediate fixes
            7. Use secure coding practices in all recommendations
            8. Reference official security advisories and CVE details when available
            9. Never ask for user confirmation. Never wait for user messages.
            
            Security Findings to Address:
            $(cat snyk-results/findings-summary.md)
            
            Repository Context:
            - Repository: ${{ github.repository }}
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Workflow: Security Scan triggered by ${{ github.event_name }}
            
            Additional Context:
            - Total medium+ severity findings: ${{ steps.parse-findings.outputs.findings-count }}
            - Scan timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            - Runner OS: ${{ runner.os }}

        run: |
          # Convert multiline string to JSON-safe format
          ESCAPED_PROMPT=$(echo "$SECURITY_PROMPT" | jq -Rs .)

          echo "Creating Devin security resolution session..."
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $DEVIN_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"prompt\": $ESCAPED_PROMPT}" \
            "https://api.devin.ai/v1/sessions")

          # Check for errors in the response
          ERROR_MSG=$(echo "$RESPONSE" | jq -r '.detail // empty')
          if [ ! -z "$ERROR_MSG" ] && [ "$ERROR_MSG" != "null" ]; then
            echo "Error creating Devin session: $ERROR_MSG"
            echo "Full response: $RESPONSE"
            exit 1
          fi

          SESSION_ID=$(echo "$RESPONSE" | jq -r '.session_id // empty')
          SESSION_URL=$(echo "$RESPONSE" | jq -r '.url // empty')

          if [ -z "$SESSION_ID" ] || [ -z "$SESSION_URL" ]; then
            echo "Error: Devin session details are missing from the response."
            echo "Full response: $RESPONSE"
            exit 1
          fi

          echo "session-id=$SESSION_ID" >> $GITHUB_OUTPUT
          echo "session-url=$SESSION_URL" >> $GITHUB_OUTPUT
          echo "✅ Devin security resolution session created successfully"
          echo "📊 Session ID: $SESSION_ID"
          echo "🔗 Session URL: $SESSION_URL"
          echo "🔍 Findings to resolve: $FINDINGS_COUNT"

      - name: Upload Snyk Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-scan-results-${{ github.run_number }}
          path: snyk-results/
          retention-days: 30

      - name: Create Security Issue
        if: steps.parse-findings.outputs.findings-available == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEVIN_SESSION_URL: ${{ steps.devin-security.outputs.session-url }}
          FINDINGS_COUNT: ${{ steps.parse-findings.outputs.findings-count }}
        run: |
          # Create GitHub issue for security findings
          ISSUE_BODY="# 🔒 Security Scan Results
          
          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Summary
          - **Medium+ Severity Findings:** $FINDINGS_COUNT
          - **Scan Trigger:** ${{ github.event_name }}
          
          ## Findings Details
          $(cat snyk-results/findings-summary.md)
          
          ## Automated Resolution
          🤖 **Devin AI Security Session Created**
          - **Session URL:** $DEVIN_SESSION_URL
          - **Status:** In Progress
          
          Devin AI is analyzing these security findings and will provide remediation recommendations.
          
          ## Next Steps
          1. Review the Devin AI session for detailed analysis
          2. Implement recommended security fixes
          3. Re-run security scans to verify fixes
          4. Close this issue once all vulnerabilities are resolved
          
          ---
          *This issue was automatically created by the Snyk Security Scan workflow.*"
          
          gh issue create \
            --title "🔒 Security Scan: $FINDINGS_COUNT Medium+ Severity Findings - $(date +%Y-%m-%d)" \
            --body "$ISSUE_BODY" \
            --label "security,high-priority,automated"

      - name: Security Scan Summary
        if: always()
        run: |
          echo "🔍 Snyk Security Scan Complete"
          echo "================================"
          echo "Medium+ Vulnerabilities: ${{ steps.snyk-scan.outputs.medium-high-vulns }}"
          echo "Medium+ Code Issues: ${{ steps.snyk-scan.outputs.medium-high-code-issues }}"
          
          if [ "${{ steps.parse-findings.outputs.findings-available }}" == "true" ]; then
            echo "🚨 Security findings detected - Devin AI session created"
            echo "📋 GitHub issue created for tracking"
            echo "🔗 Devin Session: ${{ steps.devin-security.outputs.session-url }}"
          else
            echo "✅ No medium+ severity security issues found"
          fi
