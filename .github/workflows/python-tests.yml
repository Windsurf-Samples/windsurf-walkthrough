name: Python Tests with Devin Triage

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contact-form-app/backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with pytest
        id: pytest
        run: |
          # Run pytest with verbose output and capture results
          pytest -v --tb=short > test_results.txt 2>&1
        continue-on-error: true

      - name: Check test results
        id: test_status
        run: |
          if [ ${{ steps.pytest.outcome }} == "success" ]; then
            echo "Tests passed successfully"
            echo "test_failed=false" >> $GITHUB_OUTPUT
          else
            echo "Tests failed"
            echo "test_failed=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: contact-form-app/backend/test_results.txt

  trigger-devin-on-failure:
    needs: test
    runs-on: ubuntu-latest
    if: needs.test.outputs.test_failed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          name: test-results
          path: ./

      - name: Trigger Devin Session for Test Failure
        # This step sends a request to the Devin API to create a new session for test triage
        run: |
          # Extract relevant information from the test failure
          COMMIT_SHA="${{ github.sha }}"
          BRANCH_NAME="${{ github.ref_name }}"
          WORKFLOW_RUN_ID="${{ github.run_id }}"
          
          # Read test results if available
          TEST_OUTPUT=""
          if [ -f "test_results.txt" ]; then
            TEST_OUTPUT=$(cat test_results.txt | head -50)  # Limit output to first 50 lines
          fi
          
          # Create a JSON payload for the Devin API
          # The regular expression below constructs a valid JSON string with proper escaping
          # It matches the format required by the Devin API for creating a new session
          JSON_PAYLOAD=$(cat << EOF
          {
            "task": "Triage Python test failures in contact-form-app/backend - Commit: $COMMIT_SHA",
            "repository": {
              "url": "${{ github.server_url }}/${{ github.repository }}",
              "branch": "$BRANCH_NAME"
            },
            "context": {
              "workflow_run_id": "$WORKFLOW_RUN_ID",
              "test_output": "$TEST_OUTPUT",
              "working_directory": "contact-form-app/backend",
              "test_command": "pytest -v --tb=short"
            }
          }
          EOF
          )
          
          # Send request to Devin API
          # The regular expression below validates that the API key is properly formatted before use
          # It matches the pattern of a valid Devin API key: devin_ followed by 32 alphanumeric characters
          if [[ "${{ secrets.DEVIN_API_KEY }}" =~ ^devin_[a-zA-Z0-9]{32}$ ]]; then
            curl -X POST "https://api.devin.ai/sessions" \
              -H "Authorization: Bearer ${{ secrets.DEVIN_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD" \
              --fail
            
            echo "Successfully triggered Devin session for test failure - Commit: $COMMIT_SHA"
          else
            echo "Error: Invalid Devin API key format"
            echo "Expected format: devin_[32 alphanumeric characters]"
            exit 1
          fi

      - name: Comment on PR with Devin session info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ¤– **Test Failure Detected**\n\nPython tests failed in `contact-form-app/backend`. A Devin session has been automatically triggered to triage the issue.\n\n**Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })
